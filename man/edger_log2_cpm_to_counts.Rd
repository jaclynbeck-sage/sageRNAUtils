% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalization_functions.R
\name{edger_log2_cpm_to_counts}
\alias{edger_log2_cpm_to_counts}
\title{Convert edgeR-style Log-CPM Values to Counts}
\usage{
edger_log2_cpm_to_counts(
  data,
  library_size,
  size_factors = NULL,
  prior_count = 2
)
}
\arguments{
\item{data}{a matrix or matrix-like object where rows are genes and columns
are samples. Data should be on the log2-scale, exactly as generated by a
call to \code{\link[edgeR:cpm]{edgeR::cpm()}} with argument \code{log = TRUE}.}

\item{library_size}{a numeric vector describing the library size of each
sample in \code{data}. The length of \code{library_size} must match the number of
columns in \code{data}.}

\item{size_factors}{(optional) a numeric vector of additional size factors to
include in the library size, for example TMM factors. Defaults to \code{NULL}.}

\item{prior_count}{(optional) the \code{prior.count} argument that was used in the
original call to \code{\link[edgeR:cpm]{edgeR::cpm()}}. Defaults to 2, which is the same default in
the \code{edgeR} function.}
}
\value{
an object the same type and shape as \code{data} where edgeR-style log-CPM
values have been converted back to integer counts. Any non-integer values
will be rounded off.
}
\description{
Reverses the operation performed by \code{\link[edgeR:cpm]{edgeR::cpm()}} with argument \code{log = TRUE}, which is slightly different than the simple \code{log2(CPM + pseudocount)}
operation.
}
\details{
When edgeR calculates log-CPM, it does the following:

\verb{log_cpm = [log(counts + prior) - log(adj_lib_size) + log(1e6)] / log(2)}

with:

\code{prior = pseudocount * lib_size / avg(lib_size)}

\code{adj_lib_size = lib_size + 2 * prior}

where \code{lib_size} is either \code{colSums(counts)}, \code{colSums(counts) * tmm_factors}, or some other pre-calculated offset value.

To reverse this operation, we calculate \code{prior} and \code{adj_lib_size} for all
samples as above and undo the normalization:

\verb{counts = e^[log_cpm * log(2) + log(adj_lib_size) - log(1e6)] - prior}
}
\examples{
counts <- round(matrix(runif(1000, min = 0, max = 100), ncol = 10))
log_cpm <- edgeR::cpm(counts, log = TRUE)
new_counts <- edger_log2_cpm_to_counts(log_cpm, library_size = colSums(counts))
all(new_counts == counts)

# With size factors
dge <- edgeR::DGEList(counts)
dge <- edgeR::normLibSizes(dge)
log_cpm <- edgeR::cpm(dge, log = TRUE)
new_counts <- edger_log2_cpm_to_counts(log_cpm,
                                       library_size = dge$samples$lib.size,
                                       size_factors = dge$samples$norm.factors)
all(new_counts == counts)
}
\seealso{
\code{\link[edgeR:cpm]{edgeR::cpm()}}
}
