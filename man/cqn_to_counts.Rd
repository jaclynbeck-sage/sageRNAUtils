% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalization_functions.R
\name{cqn_to_counts}
\alias{cqn_to_counts}
\title{Convert CQN-Normalized Values to Counts}
\usage{
cqn_to_counts(data, library_size)
}
\arguments{
\item{data}{a matrix or matrix-like object where rows are genes and columns
are samples. Data should be on the log2-scale, exactly as generated by a
call to \code{\link[cqn:cqn]{cqn::cqn()}}.}

\item{library_size}{a numeric vector describing the library size of each
sample in \code{data}, which should match what was input to the original call to
\code{\link[cqn:cqn]{cqn::cqn()}}. Typically, \code{library_size} will be equal to the \code{sizeFactors}
argument if it was supplied to \code{cqn}, or to the sum of counts for each
sample if \code{sizeFactors} was left as the default (\code{NULL}). The length of
\code{library_size} must match the number of columns in \code{data}.}
}
\value{
an object the same type and shape as \code{data} where cqn-normalized
values have been converted back to integer counts. Any non-integer values
will be rounded off, and values less than 0 will be set to 0.
}
\description{
Takes normalized values generated by \code{\link[cqn:cqn]{cqn::cqn()}}, which are on the
log2-scale, and converts them back to "corrected" counts.
}
\details{
\code{\link[cqn:cqn]{cqn::cqn()}} normalizes the data prior to GC content adjustment as follows:

\code{log_data = log2(counts + 1) - log2(lib_size / 10^6)}

where \code{lib_size} is the library size of each sample, by default \code{colSums(counts)}
in the \code{cqn} function.

To reverse this operation on the output of \code{cqn} to get counts we do:

\code{counts = 2^(cqn_data + log2(lib_size / 10^6)) - 1}
}
\examples{
\dontrun{
# Generate fake counts, GC content, and lengths for each gene
counts <- round(matrix(runif(1000, min = 0, max = 100), ncol = 10))
gc_content <- abs(rnorm(100, mean = 0.5, sd = 0.25))
gene_length <- abs(round(rnorm(100, mean = 200, sd = 100)))

# Run CQN
cqn_data <- cqn::cqn(counts, x = gc_content, lengths = gene_length)
cqn_log <- cqn_data$y + cqn_data$offset

# Get corrected counts
corrected_counts <- cqn_to_counts(cqn_log, library_size = colSums(counts))
}
}
